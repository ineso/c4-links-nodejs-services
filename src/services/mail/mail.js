// Copyright Carrefour(2021)
//

const _ = require('lodash')
const nodemailer = require("nodemailer")

const defaultNotes = [
  'This email has been automatically generated by the Carrefour Links System. ' +
  'Please do not reply to this email.',
  'The content of this email is confidential and intended for recipients ' +
  'specified in this message only.',
  'If you received this message by mistake, please inform us as soon as ' +
  'possible by email at data_growth_together@carrefour.com.',
  'Please do not print this email unless it is necessary. Every unprinted ' +
  'email helps the environment.'
]

/** 
 * Class for sending emails.
 */
class Mail {

  /**
   * @constructor
   * @param {Object} transport the transport configuration.
   */
  constructor(transport) {
    this.title = 'Carrefour Links'
    this.greeting = 'Dear User,'
    this.closing = 'Best regards,'
    if (transport && !_.isEmpty(transport)) {
      this.transport = transport
      this.transporter = nodemailer.createTransport(transport)
      this.from = _.get(transport, 'auth.user')
    }
    this.notes = defaultNotes
  }

  /**
   * Set the title 
   * @param  {string} t the new title.
   */
  setTitle (t) {
    this.title = t
  }

  /**
   * Set the from
   * @param  {string} f the new sender.
   */
  setFrom (f) {
    this.from = f
  }

  /**
   * Set the greeting phrase.
   * 
   * @param  {string} g
   */
  setGreeting (g) {
    this.greeting = g
  }

  /**
   * Set the closing phrase.
   * 
   * @param  {string} c
   */
  setClosing (c) {
    this.closing = c
  }

  /**
   * Empty the notes list.
   */
  clearNotes () {
    this.notes = []
  }

  /**
   * Add a note in the notes list.
   * 
   * @param  {string} n
   */
  addNote (n) {
    this.notes.push(n)
  }

  html (text) {
    let notes = ''

    if (this.notes.length > 0) {
      notes = `
        <div style="font-size: 0.8em; color: #959595;">
          <p><u>Important Notes:</u></p>
          <ul style="margin-block-start: 0.5em;
            margin-block-end: 0.5em;
            margin-inline-start: 0;
            margin-inline-end: 0;"
          >`
      this.notes.forEach(n => { notes += `<li>${n}</li>` })
      notes += `</ul></div>`
    }

    return `
    <html lang="en">
      <head>
        <title>${this.title}</title>
        <style type="text/css">
            * {
              box-sizing: border-box;
            }

            body, html {
              height: 100%;
              font-family: Arial, Helvetica, sans-serif;
              font-size: 1.1em;
              color: #235695;
              margin: 0.25em;
            }
        </style>
      </head>
    
      <body style="font-family: Arial, Helvetica, sans-serif; 
        font-size: 1.1em;
        margin: 0.25em;
        color: #235695;"
      >
        <p>${this.greeting}</p>
        <p>${text}</p>
        <p>${this.closing}</p>
        ${notes}
      </body>
    </html>
    `
  }

  basic (text) {
    let notes = ''

    if (this.notes.length > 0) {
      notes = "Important Notes:\n" + this.notes.join("\n")
    }

    return `
      ${this.greeting}

      ${text}

      ${this.closing}

      ${notes}
    `
  }

  /**
   * Send an email.
   * 
   * @param  {string} to recipents of the email.
   * @param  {string} subject subject of the email.
   * @param  {string} text body text of the email.
   */
  async send (to, subject, text) {
    if (this.from && this.transporter && to && to.length > 0 && text) {
      const message = {
        from: this.from,
        to: Array.isArray(to) ? to.join(', ') : to,
        subject: subject || this.title,
        text: this.basic(text),
        html: this.html(text)
      }

      try {
        await this.transporter.sendMail(message)
      } catch (err) {
        // eslint-disable-next-line no-console
        console.warn(err)
      }
    }
  }
}

module.exports = Mail
